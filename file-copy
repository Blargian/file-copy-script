#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import argparse
import re
import calendar
from pathlib import Path
from typing import List, TypedDict

SCRIPT_PATH = Path(__file__).absolute()


def dir_name(name: str) -> Path:
    path = Path(name)
    if not path.is_absolute():
        path = Path.cwd() / name
    return path

def get_folders_from_root(rootdir : Path) -> List[str]:
    print("finding folders beginning with S2A...")
    dir_list = os.listdir(rootdir)
    regex = re.compile(r'S2A_.*.SAFE')
    filtered_folders = [i for i in dir_list if regex.match(i)]
    print("\nfound the following folders:")
    for folder in filtered_folders:
        print(f'{folder}')
    print("\n")
    return filtered_folders


class FolderData(TypedDict):
    foldername : str
    tilename : str
    month : str

S2A_Folder = List[FolderData]
def extract_name_date(filtered_folders : List[str]) -> S2A_Folder:
    folder_data = list()
    # regex extraction of tilename and month
    regex_tilename = re.compile(r'(\D{3})_20')
    regex_date = re.compile(r'MSIL2A_(\d{8})')
    for folder in filtered_folders:
        tilename = regex_tilename.search(folder).group(1)
        date = regex_date.search(folder).group(0)
        month = calendar.month_name[int(date[-4:-2])]
        folder_data.append({
            'folderpath' : folder,
            'tilename' : tilename,
            'month' : month,
            })
    return folder_data

def create_subfolder_from_parent(root : Path, folders_attributes : S2A_Folder, folder_ending : str):
    print(f'creating subfolders for {folder_ending}')
    for folder in folders_attributes:
        parent_directory = folder["folderpath"]
        path_to_make = f'{root}/{parent_directory}/{folder["month"]}_{folder["tilename"]}_{folder_ending}'
        try:
            if not os.path.exists(path_to_make):
                os.makedirs(path_to_make)
                print(f'successfully created: {path_to_make}')
        except OSError as error:
            print(error)

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        formatter_class = argparse.ArgumentDefaultsHelpFormatter,
	description = "ArcGIS file copy utility",
    )
    parser.add_argument(
        "--mode",
	choices = ["default","custom"],
	required=True
    )
    parser.add_argument(
        "--root",
	default=SCRIPT_PATH,
	type=dir_name,
	required=True,
	help="please provide a path to the root directory"
    )

    args = parser.parse_args()
    return args

def main() -> None:
    args = parse_args()
    if args.mode == "default":
        print("Running script in default mode...")
        folders_attributes = extract_name_date(get_folders_from_root(args.root))
        create_subfolder_from_parent(args.root,folders_attributes,"bands")
        create_subfolder_from_parent(args.root,folders_attributes,"resampled")

    else:
        print("You have chosen to enter custom mode")

if __name__ == "__main__":
    main()

